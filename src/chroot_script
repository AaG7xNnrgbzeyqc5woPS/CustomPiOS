#!/usr/bin/env bash
set -x
set -e
# OctoPI generation script
# Helper script that runs in a Raspbian chroot to create the OctoPI distro
# Written by Guy Sheffer <guysoft at gmail dot com>
# GPL V3

export LC_ALL=C

source /common.sh
install_cleanup_trap

if [ -n "$BASE_APT_PROXY" ]
then
  echo "Acquire::http { Proxy \"http://$BASE_APT_PROXY\"; };" > /etc/apt/apt.conf.d/02octopi_build_proxy
fi

if [ -n "$BASE_PYPI_INDEX" ]
then
  pip_index_config="[global]\nindex-url = $BASE_PYPI_INDEX"
  easyinstall_index_config="[easy_install]\nindex-url = $BASE_PYPI_INDEX"

  mkdir -p /root/.pip
  echo -e "$pip_index_config" > /root/.pip/pip.conf
  echo -e "$easyinstall_index_config" > /root/.pydistutils.cfg

  mkdir -p /home/pi/.pip
  sudo -u pi echo -e "$pip_index_config" > /home/pi/.pip/pip.conf
  sudo -u pi echo -e "$easyinstall_index_config" > /home/pi/.pydistutils.cfg

  echo "Configured pypi index url $BASE_PYPI_INDEX"
  cat /home/pi/.pip/pip.conf
  cat /home/pi/.pydistutils.cfg
fi

# prevent any installed services from automatically starting (I'm looking at you haproxy)
echo exit 101 > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot
apt-get update

# in case we are building from a regular raspbian image instead of the lite one...
remove_extra=$(remove_if_installed scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats greenfoot nodered)
echo "removing:" $remove_extra
apt-get remove -y --purge  $remove_extra
apt-get autoremove -y

apt-get -y --force-yes install python2.7 python-virtualenv python-dev git screen subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1 libffi-dev libssl-dev

echo " - Reinstall iputils-ping"
apt-get install --reinstall iputils-ping


pushd /home/pi

  #build virtualenv
  sudo -u pi virtualenv oprint
  
  # first lets upgrade pip (the shipped version is way too old...)
  sudo -u pi /home/pi/oprint/bin/pip install --upgrade pip

  # OctoPrint & pyserial
  if [ "$OCTOPI_INCLUDE_OCTOPRINT" == "yes" ]
  then
    echo "--- Installing OctoPrint"

    #pybonjour (for mdns discovery)
    sudo -u pi /home/pi/oprint/bin/pip install https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/pybonjour/pybonjour-1.1.1.tar.gz

    #OctoPrint
    gitclone OCTOPI_OCTOPRINT_REPO OctoPrint
    pushd OctoPrint
      PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/python setup.py install
    popd
  fi

  #mjpg-streamer
  if [ "$OCTOPI_INCLUDE_MJPGSTREAMER" == "yes" ]
  then
    echo "--- Installing mjpg-streamer"
    if [ $( is_in_apt libjpeg62-turbo-dev ) -eq 1 ]; then
      apt-get -y --force-yes install libjpeg62-turbo-dev
    elif [ $( is_in_apt libjpeg8-dev ) -eq 1 ]; then 
      apt-get -y --force-yes install libjpeg8-dev
    fi
    
    apt-get -y --force-yes --no-install-recommends install imagemagick libav-tools libv4l-dev
    gitclone OCTOPI_MJPGSTREAMER_REPO mjpg-streamer
    pushd mjpg-streamer
      mv mjpg-streamer-experimental/* .
      sudo -u pi make
    popd
  fi
  
  #CuraEngine
  if [ "$OCTOPI_INCLUDE_CURAENGINE" == "yes" ]
  then
    echo "--- Installing CuraEngine"
    folder=CuraEngine-$OCTOPI_CURAENGINE_VERSION
    zipfile=$folder.zip
    apt-get -y install gcc-4.9 g++-4.9
    sudo -u pi wget -O$zipfile $OCTOPI_CURAENGINE_ARCHIVE
    sudo -u pi unzip $zipfile
    pushd $folder
      sudo -u pi make CXX=g++-4.9 VERSION=$OCTOPI_CURAENGINE_VERSION
      cp build/CuraEngine /usr/local/bin/cura_engine
    popd
    sudo -u pi rm -r $folder $zipfile
  fi

  #setup haproxy for http and https, and webcam
  if [ "$OCTOPI_INCLUDE_HAPROXY" == "yes" ]
  then
    echo "--- Installing haproxy"
    apt-get -y --force-yes install ssl-cert haproxy
    rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
  fi

  if [ "$OCTOPI_INCLUDE_WIRINGPI" == "yes" ]
  then
    echo "--- Installing WiringPi"
    apt-get install wiringpi
  fi
  
popd

#Make sure user pi has access to serial ports
usermod -a -G tty pi
usermod -a -G dialout pi

# store octopi commit used to build this image
echo "$OCTOPI_COMMIT" > /etc/octopi_commit
echo "$BASE_BUILDBASE" > /etc/octopi_buildbase

# allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/octoprint-shutdown
echo "pi ALL=NOPASSWD: /sbin/service" > /etc/sudoers.d/octoprint-service

#reach printer by name
echo "$BASE_OVERRIDE_HOSTNAME" > /etc/hostname
sed -i -e "s@raspberrypi@$BASE_OVERRIDE_HOSTNAME@g" /etc/hosts

#make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
#default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# enable raspicam
echo "# enable raspicam" >> /boot/config.txt
echo "start_x=1" >> /boot/config.txt
echo "gpu_mem=128" >> /boot/config.txt

# allow network configuration via /boot/octopi-network.txt
sed -i "s@iface wlan0 @iface wlan0-raspbian @g" /etc/network/interfaces
sed -i "s@iface wlan1 @iface wlan1-raspbian @g" /etc/network/interfaces
echo "mapping wlan0" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "mapping wlan1" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "source /boot/octopi-network.txt" >> /etc/network/interfaces

# allow configuring multiple wifi networks via /boot/octopi-wpa-supplicant.txt
mv /etc/wpa_supplicant/wpa_supplicant.conf /boot/octopi-wpa-supplicant.txt
ln -s /boot/octopi-wpa-supplicant.txt /etc/wpa_supplicant/wpa_supplicant.conf
cat <<EOT >> /etc/wpa_supplicant/wpa_supplicant.conf

# This is only used to configure multiple wifi networks or other advanced wifi features.
# take a look into octopi-network.txt instead if you only need basic wifi configuration
# 'man -s 5 wpa_supplicant.conf' for advanced options
#network={
#  ssid="Your Wifi SSID"
#  psk="supersecretwifipassword"
#}

## You can configure more than 1 wifi networks by adding more 'network' blocks
#network={
#  ssid="Another Wifi"
#  psk="password"
#}
EOT

# copy /etc/wpa_supplicant/ifupdown.sh to /etc/ifplugd/action.d/ifupdown - for wlan auto reconnect
[ -f /etc/ifplugd/action.d/ifupdown ] && mv /etc/ifplugd/action.d/ifupdown /etc/ifplugd/action.d/ifupdown.original
[ -f /etc/wpa_supplicant/ifupdown.sh ] && ln -s /etc/wpa_supplicant/ifupdown.sh /etc/ifplugd/action.d/ifupdown

# add some "How To" info to boot output
sed -i 's@exit 0@@' /etc/rc.local
cat <<'EOT' >> /etc/rc.local

echo
echo "------------------------------------------------------------"
echo
echo "You may now open a web browser on your local network and "
echo "navigate to any of the following addresses to access "
echo "OctoPrint:"
echo
echo "    http://octopi.local"

for ip in $(hostname -I);
do 
    echo "    http://$ip"
done

echo
echo "https is also available, with a self-signed certificate."
echo 
echo "------------------------------------------------------------"
echo
EOT

# prevent ntp updates from failing due to some Rpi3 weirdness, see also "Fix SSH" further below
echo '/sbin/iptables -t mangle -I POSTROUTING 1 -o wlan0 -p udp --dport 123 -j TOS --set-tos 0x00' >> /etc/rc.local

echo 'exit 0' >> /etc/rc.local

# add a longer welcome text to ~pi/.bashrc
echo "source /home/pi/scripts/welcome" >> /home/pi/.bashrc

#unpack root in the end, so etc file are not overwritten, might need to add two roots int he future
unpack /filesystem/root /

#####################################################################
### setup services

### Disable GUI at start
systemctl_if_exists disable lightdm.service

update-rc.d change_password defaults
update-rc.d change_hostname defaults

systemctl_if_exists enable check_wpa_link.service

### Fix SSH
echo "IPQoS 0x00" >> /etc/ssh/sshd_config

### OctoPrint

if [ "$OCTOPI_INCLUDE_OCTOPRINT" == "yes" ]
then
  update-rc.d octoprint defaults 95
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/octoprint
  rm /etc/default/octoprint
fi

### haproxy

if [ "$OCTOPI_INCLUDE_HAPROXY" == "yes" ]
then
  update-rc.d gencert defaults
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/gencert

  # also we need to make OctoPrint bind to all interfaces because otherwise
  # it will be unaccessible...
  [ -f /etc/default/octoprint ] && sed -i "s@HOST=127.0.0.1@HOST=0.0.0.0@" /etc/default/octoprint 
fi

### CuraEngine

if [ ! "$OCTOPI_INCLUDE_CURAENGINE" == "yes" ]
then
  # unconfigure the cura engine path in octoprint's config.yaml
  sudo -u pi sed -i -e "s@cura_engine: /usr/local/bin/cura_engine@cura_engine:@g" /home/pi/.octoprint/config.yaml
fi

### mjpg_streamer

if [ "$OCTOPI_INCLUDE_MJPGSTREAMER" == "yes" ]
then
  # make webcamd autostart
  update-rc.d webcamd defaults
else
  rm /etc/logrotate.d/webcamd
  rm /etc/init.d/webcamd
  rm /etc/default/webcamd
  rm /root/bin/webcamd
fi

#cleanup
apt-get clean
apt-get autoremove -y

rm -r /usr/sbin/policy-rc.d

if [ -n "$BASE_APT_PROXY" ]
then
  rm -r /etc/apt/apt.conf.d/02octopi_build_proxy
fi

if [ -n "$BASE_PYPI_INDEX" ]
then
  rm -r /root/.pip
  rm -r /root/.pydistutils.cfg
  rm -r /home/pi/.pip/pip.conf
  rm -r /home/pi/.pydistutils.cfg
fi
